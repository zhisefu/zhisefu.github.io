<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山居杂记</title>
  
  <subtitle>记知识，记世界</subtitle>
  <link href="https://zhisefu.com/atom.xml" rel="self"/>
  
  <link href="https://zhisefu.com/"/>
  <updated>2023-02-20T15:05:24.127Z</updated>
  <id>https://zhisefu.com/</id>
  
  <author>
    <name>置啬夫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>考古学初阶之考古学与历史学</title>
    <link href="https://zhisefu.com/wiki/50129/"/>
    <id>https://zhisefu.com/wiki/50129/</id>
    <published>2023-02-20T15:01:49.000Z</published>
    <updated>2023-02-20T15:05:24.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是考古学"><a href="#什么是考古学" class="headerlink" title="什么是考古学"></a>什么是考古学</h1><h2 id="考古学的界定"><a href="#考古学的界定" class="headerlink" title="考古学的界定"></a>考古学的界定</h2><p>书中的表述，</p><blockquote><p>考古学是研究如何寻找和获取古代人类社会的实物遗存，以及如何依据这些遗存来研究人类社会历史的一门科学。</p></blockquote><p>其中要点，</p><ol><li>研究对象：整个古代社会；</li><li>研究资料：实物遗存；</li><li>理论方法：寻找、获取实物遗存，研究人类社会历史。</li></ol><h2 id="考古学的理论基础"><a href="#考古学的理论基础" class="headerlink" title="考古学的理论基础"></a>考古学的理论基础</h2><p>考古学是人文科学与自然科学的结合，</p><ol><li>本质上是一门历史科学；</li><li>实际操作上包含了，<ol><li>地质学的地层学，</li><li>生物学的分类学，</li><li>人类学的文化圈理论。</li></ol></li></ol><h2 id="考古学的任务"><a href="#考古学的任务" class="headerlink" title="考古学的任务"></a>考古学的任务</h2><p>考古学要回答的问题，</p><ol><li>西方学者认为，<ol><li>when</li><li>where</li><li>what</li><li>who</li><li>why</li></ol></li><li>本书认为（比西方学者多了一个“何用”），<ol><li>何时</li><li>何地</li><li>何事</li><li>何人</li><li>何以</li><li>何用（不是为了考古而考古）</li></ol></li></ol><p><strong>个人认为</strong></p><hr><p>“何用”提出得很好，<br>一方面，没有意义的工作一文不值；<br>另一方面，明确目的和意义，可以更好地引导工作朝着明确的方向进行。</p><hr><h1 id="考古学的发展过程"><a href="#考古学的发展过程" class="headerlink" title="考古学的发展过程"></a>考古学的发展过程</h1><h2 id="时代划分"><a href="#时代划分" class="headerlink" title="时代划分"></a>时代划分</h2><ol><li><p>1836年，丹麦C.J.汤姆森正式提出根据制造工具的材料划分时代，</p><ol><li>石器时代，</li><li>青铜时代，</li><li>铁器时代。</li></ol></li><li><p>东汉袁康在《越绝书•外卷•记宝剑第十三》中提到，春秋风胡子对楚昭王（公元前515-前489年在位）说过一段话，对不同时代的器物材料进行了划分，</p></li></ol><blockquote><p>轩辕、神农、赫胥之时以石为兵，断树木为宫室，死而龙藏，夫神主使然。至黄帝之时以玉为兵，以伐树木为宫室，凿地。夫玉亦神物也，又遇圣主使然，死而龙藏。禹穴之时以铜为兵，以凿伊阙通龙门，决江导河，东注于海，天下通平，治为宫室，岂非圣主之力哉！当此之时作铁兵，威服三军，天下闻之莫敢不服，此亦铁兵之神。</p></blockquote><p>这段话中的“兵”，不单指“威服三军”的兵器，也包括“伐树木”、“凿地”、“决江导河”的生产工具。</p><p>根据上述记载，按照工具的材料可将时代划分为，<br>    1. 石器时代，<br>    2. 玉器时代，<br>    3. 铜器时代，<br>    4. 铁器时代。</p><p>然而，<br>    1. 三期说在欧亚大陆较为通用，“玉器时代”在中国可用、在其他国家不适用；<br>    2. 玉器时代也是铜石并用时代。<br>因此，仍采用三期说。</p><h2 id="古代金石学"><a href="#古代金石学" class="headerlink" title="古代金石学"></a>古代金石学</h2><p>历代都有对古物古迹研究的记载，到宋代发展为金石学。</p><p>宋代流传至今的金石学著作有22种，其中最重要的有，</p><ol><li>吕大临的《考古图》（1092年），</li><li>官修的《宣和博古图》（1098年）。</li></ol><p>清代由于乾嘉学派的推动，金石学或古器物学得到极大的发展，留下的相关著作近千种。（注：容媛《金石学录目》，中央研究院历史语言研究所单刊乙种之二，1930年）</p><p>金石学或古器物学没有建立起获取资料的科学方法，难以直接发展为考古学。</p><p>真正意义上的考古学实在进化论思想基础上，借用地质地层学和生物分类学的方法并加以适当改造，才得以产生的。</p><h2 id="近代考古学"><a href="#近代考古学" class="headerlink" title="近代考古学"></a>近代考古学</h2><ol><li><p>查尔斯•莱伊尔（Charles Lyell）于1830-1833年陆续发表四卷本《地质学原理》（Principles of Geology），第一次建立起科学的地质地层学，为考古学提供了科学支持。</p></li><li><p>1836年，C.J.汤姆森依据工具质地划分三个时期，奠定了近代考古学的基础。</p></li><li><p>1903年，瑞典人蒙特留斯（G.O.A.Montelius）的《方法论：器物类型学》出版，是考古类型学的奠基性著作，为考古学者采用，对建立各地的文化谱系发挥了极大的作用。</p></li></ol><p>真正科学考古，建立在<strong>地质地层学</strong>和<strong>类型学</strong>之上，到20世纪初才算完成。</p><p>中国的考古学，开始于1921年正式发掘河南渑池县仰韶村新石器时代遗址。</p><h1 id="考古学与历史学的关系"><a href="#考古学与历史学的关系" class="headerlink" title="考古学与历史学的关系"></a>考古学与历史学的关系</h1><ol><li><strong>考古学扩大了历史研究的地域</strong></li></ol><p>传统的历史学主要是文化比较发达并且有自己文字记载的民族的历史，但世界上大部分民族没有自己的文字，在地理大发现之前，许多民族不为有文字的民族所知，因此，他们的历史不会被记录下来。</p><p>考古学不受文字的局限。例如，殖民者进入前的美洲历史、大洋洲历史、非洲中南部历史，都是由考古学逐渐探明的。</p><ol start="2"><li><strong>考古学延伸了历史研究的时间</strong></li></ol><p>传统的历史研究靠的是文献记载，存在问题，<br>    1. 文字出现之前的历史无从知晓；<br>    2. 文献容易失传。</p><p>考古学根据人类遗迹来研究历史、不受文献记载的限制，只要有人类出现并且有遗迹存留，经考古学者发现、研究，就可以在一定程度上复原当时的历史。</p><ol start="3"><li><strong>考古学拓展和充实了历史研究的内容</strong></li></ol><p>文献记载的历史，<br>    1. 多偏重于上层社会（如宫廷史、政治史、军事史、文化史、人物传记等），缺乏下层民众的生活记述（如生产和经济活动）；<br>    2. 过于宏观，不够具体。</p><p>考古学研究，<br>    1. 不分阶层，一例看待；<br>    2. 发现的实物有实感、更具体。<br>从而，大大充实了历史学研究的内容。</p><ol start="4"><li><strong>考古学使历史研究走上科学化的轨道</strong></li></ol><p>传统的以文献为基础的历史学属于人文学科，与自然科学很少有关系。</p><p>考古学就其研究人类历史的目的来说，也具有人文学科的性质；但就其研究方法来说，则基本上属于自然科学，主要体现在，<br>    1. 田野考古基于，<br>        1. 地质学，<br>        2. 生物学，<br>        3. 人类学，<br>    2. 考古的若干分支学科，<br>        1. 环境考古，例如，根据地质、水文、动植物群落的研究了解环境状况，<br>        2. 动植物考古，例如，通过种子、茎秆、土壤中的孢粉或植硅石的组合研究植物，<br>        3. 农业考古，例如，对于漆木器、纺织品等，考虑如何保护，<br>        4. 冶金考古，例如，检测铜器的成分比例，通过铅同位素分析等探索原料产地，<br>        5. 考古年代学，例如，使用碳-14、铀系、钾氩法、热释光等测定年代。</p><p>考古学和历史学好比车子的两个轮子，一个以实物为基础，一个以文献为基础，缺一不可。</p><p><br/>–end–<br/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是考古学&quot;&gt;&lt;a href=&quot;#什么是考古学&quot; class=&quot;headerlink&quot; title=&quot;什么是考古学&quot;&gt;&lt;/a&gt;什么是考古学&lt;/h1&gt;&lt;h2 id=&quot;考古学的界定&quot;&gt;&lt;a href=&quot;#考古学的界定&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="考古" scheme="https://zhisefu.com/categories/%E8%80%83%E5%8F%A4/"/>
    
    <category term="《考古学初级》笔记" scheme="https://zhisefu.com/categories/%E8%80%83%E5%8F%A4/%E3%80%8A%E8%80%83%E5%8F%A4%E5%AD%A6%E5%88%9D%E7%BA%A7%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="L1" scheme="https://zhisefu.com/tags/L1/"/>
    
    <category term="笔记" scheme="https://zhisefu.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="考古" scheme="https://zhisefu.com/tags/%E8%80%83%E5%8F%A4/"/>
    
  </entry>
  
  <entry>
    <title>考古学初阶之图书信息</title>
    <link href="https://zhisefu.com/wiki/55744/"/>
    <id>https://zhisefu.com/wiki/55744/</id>
    <published>2023-02-20T11:58:21.000Z</published>
    <updated>2023-02-20T12:01:40.297Z</updated>
    
    <content type="html"><![CDATA[<p><strong>名称：</strong> 考古学初阶<br><strong>作者：</strong> 严文明<br><strong>ISBN：</strong> 978-7-5010-5859-4<br><strong>出版发行：</strong> 文物出版社<br><strong>版次：</strong> 2018年12月第1版<br><strong>印次：</strong> 2021年1月第3次印刷</p><p><br/>–end–<br/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;名称：&lt;/strong&gt; 考古学初阶&lt;br&gt;&lt;strong&gt;作者：&lt;/strong&gt; 严文明&lt;br&gt;&lt;strong&gt;ISBN：&lt;/strong&gt; 978-7-5010-5859-4&lt;br&gt;&lt;strong&gt;出版发行：&lt;/strong&gt; 文物出版社&lt;br&gt;&lt;st</summary>
      
    
    
    
    <category term="考古" scheme="https://zhisefu.com/categories/%E8%80%83%E5%8F%A4/"/>
    
    <category term="《考古学初级》笔记" scheme="https://zhisefu.com/categories/%E8%80%83%E5%8F%A4/%E3%80%8A%E8%80%83%E5%8F%A4%E5%AD%A6%E5%88%9D%E7%BA%A7%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="L1" scheme="https://zhisefu.com/tags/L1/"/>
    
    <category term="笔记" scheme="https://zhisefu.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="考古" scheme="https://zhisefu.com/tags/%E8%80%83%E5%8F%A4/"/>
    
  </entry>
  
  <entry>
    <title>git教程之快速上手</title>
    <link href="https://zhisefu.com/wiki/4958/"/>
    <id>https://zhisefu.com/wiki/4958/</id>
    <published>2023-02-14T10:09:47.000Z</published>
    <updated>2023-02-20T10:48:25.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>引用官方介绍，如下，</p><blockquote><p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p></blockquote><p>参考，<br><a href="https://git-scm.com/">https://git-scm.com/</a></p><p>git 在本地保存了完整的版本库，既可以在本地独立管理版本，也可以和远程版本库进行同步。</p><p>本文以本地为例，介绍了 git 的基本使用。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>以 ubuntu-22.04 LTS 为例，安装命令如下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git-all</span><br></pre></td></tr></table></figure><p>安装完后，可通过<code>git --version</code>查看 git 版本，</p><p><img src="/wiki/4958/images/git-version.png" alt="git-version" title="git version"></p><p>其他操作系统安装 git 的命令可以参考官方文档：<a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">https://git-scm.com/book/en/v2/Getting-Started-Installing-Git</a></p><h1 id="必要配置"><a href="#必要配置" class="headerlink" title="必要配置"></a>必要配置</h1><p>使用 git 前，必须设置<code>user.name</code>和<code>user.email</code>。</p><p>这两个属性用来标识用户身份，会出现在每一次的提交信息中。</p><h2 id="设置配置"><a href="#设置配置" class="headerlink" title="设置配置"></a>设置配置</h2><p>设置<code>user.name</code>和<code>user.email</code>命令如下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;&lt;your-name&gt;&quot;</span><br><span class="line">git config --global user.email &quot;&lt;your-email&gt;&quot;</span><br></pre></td></tr></table></figure><p><img src="/wiki/4958/images/git-config-user.png" alt="git-config-user" title="set user"></p><p>其中，<code>--global</code>表示属性的作用范围。<code>git config</code>中一共有三个作用范围，</p><ol><li><code>--local</code>，只对当前项目生效；</li><li><code>--global</code>，对当前用户的所有项目生效；</li><li><code>--system</code>，对所有用户的所有项目生效。</li></ol><p><strong>注意，</strong></p><ol><li>如果不指定作用范围，默认是<code>--local</code>；</li><li>属性覆盖优先级：<code>--local</code> &gt; <code>--global</code> &gt; <code>--system</code>。</li></ol><h2 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h2><ol><li>查看所有级别的属性（包括<code>--local</code>、<code>--global</code>和<code>--system</code>），</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><ol start="2"><li>查看指定级别的属性，</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list --local</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list --global</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list --system</span><br></pre></td></tr></table></figure><h2 id="取消配置"><a href="#取消配置" class="headerlink" title="取消配置"></a>取消配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset &lt;property-name&gt;</span><br></pre></td></tr></table></figure><p><img src="/wiki/4958/images/git-config-unset.png" alt="git-config-unset" title="unset user.name"></p><p>此外，</p><ol><li><code>--global</code>还可以换成<code>--local</code>或者<code>--system</code>，表示撤销某个级别的属性设置；</li><li>默认是<code>--local</code>。</li></ol><h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h1><ol><li>从零开始创建项目，</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init &lt;project-root-directory-name&gt;</span><br></pre></td></tr></table></figure><p>此时，名为<code>&lt;project-root-directory-name&gt;</code>的目录会被自动创建，并且在该目录下会自动创建<code>.git</code>目录用来存储元数据。</p><ol start="2"><li>将已有项目添加 git 管理，</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;project-root-directory&gt;</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>即，在项目根目录下执行<code>git init</code>。</p><p>此时，会在当前目录（即，项目根目录）下创建<code>.git</code>目录用来存储元数据。</p><h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><h2 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h2><p>在 git 管理的项目中，一个文件的某个版本（或某次修改），存在于如下几个位置，</p><ol><li><strong>工作目录</strong></li></ol><p>项目目录下，<code>.git</code>之外的目录即为工作目录。</p><p>之所以称之为“工作目录”，是因为用户可以在这里新建、修改、删除文件或目录，之后通过命令将变化提交给 git。</p><p>工作目录中的文件有如下状态，<br>    1. <strong>untracked</strong>：新创建的文件会是 untracked 状态，此时，需要通过命令将新文件提交给 git 管理；<br>    2. <strong>modified</strong>：被 git 管理的文件，在工作目录中内容被修改了，就会处于 modified 状态，此时，需要通过命令将变化更新给 git；<br>    3. <strong>deleted</strong>：被 git 管理的文件，在工作目录中被删除了，就会处于 deleted 状态，此时，需要通过命令将删除更新给 git。</p><ol start="2"><li><strong>暂存区</strong></li></ol><p>工作目录中的文件如果有变化（新建、修改、删除），需要通过命令将这种变化更新给 git。通常，并不是修改完一个文件就立即提交到版本库；而是将修改完的文件放入暂存区，待本次所有相关的文件都修改好后一次性提交到版本库。</p><p>当文件被提交到暂存区后，git 就会为之创建一个 blob 对象存储当前版本的文件内容。</p><p>git 对象（包括 blob 对象）位于 git 元数据目录<code>.git/objects/</code>下。</p><ol start="3"><li><strong>版本库</strong></li></ol><p>当文件变化（新建、修改、删除）需要作为历史版本被持久化保存时，此时，变化是通过命令提交到版本库。之后，可以通过回退版本找回当前文件内容。</p><p>可以从暂存区提交到版本库（这是比较合理的方式），也可以直接从工作目录提交到版本库（新建的文件不能直接提交到版本库，需要先添加到暂存区）。</p><p>当文件被提交到版本库后，git 会为此次提交创建一个 tree 对象，该 tree 对象保存了以本次提交的视角看到的项目目录下的目录结构和文件内容。</p><p>git 对象（包括 tree 对象）位于 git 元数据目录<code>.git/objects/</code>下。</p><h2 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h2><h3 id="工作目录-–-gt-暂存区"><a href="#工作目录-–-gt-暂存区" class="headerlink" title="工作目录 –&gt; 暂存区"></a>工作目录 –&gt; 暂存区</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add --all</span><br></pre></td></tr></table></figure><p>前者是将指定文件添加到暂存区（即，交给 git 管理）；后者是将所有新文件添加到暂存区。</p><p>可以通过<code>git status</code>查看文件状态。</p><p><img src="/wiki/4958/images/git-add-new.png" alt="git-add-new" title="add new file"></p><h3 id="暂存区-–-gt-版本库"><a href="#暂存区-–-gt-版本库" class="headerlink" title="暂存区 –&gt; 版本库"></a>暂存区 –&gt; 版本库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit &lt;file-name&gt;... -m &quot;some message for describing this commit&quot;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;some message for describing this commit&quot;</span><br></pre></td></tr></table></figure><p>前者是将指定文件从暂存区提交到版本库；后者是将暂存区所有文件提交到版本库。</p><p>可以通过<code>git log --all --graph</code>查看所有历史提交。</p><p><img src="/wiki/4958/images/git-commit.png" alt="git-commit" title="commit files"></p><p>此后，被提交到版本库的文件就多了一个历史版本，之后可以随时回到任意一个历史版本。</p><h3 id="版本库-–-gt-暂存区"><a href="#版本库-–-gt-暂存区" class="headerlink" title="版本库 –&gt; 暂存区"></a>版本库 –&gt; 暂存区</h3><h4 id="版本库的最新版本-–-gt-暂存区"><a href="#版本库的最新版本-–-gt-暂存区" class="headerlink" title="版本库的最新版本 –&gt; 暂存区"></a>版本库的最新版本 –&gt; 暂存区</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --mixed</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset -- &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><p>前者是用版本库中的最新版本恢复暂存区中的所有文件；后者是恢复指定文件。</p><p>此时，</p><ol><li>暂存区中的相关文件会与版本库中的最新版本保持一致；</li><li>暂存区中没被提交到版本库的修改退回到了工作目录中。</li></ol><h4 id="版本库的指定版本-–-gt-暂存区"><a href="#版本库的指定版本-–-gt-暂存区" class="headerlink" title="版本库的指定版本 –&gt; 暂存区"></a>版本库的指定版本 –&gt; 暂存区</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --mixed &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;commit-id&gt; -- &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><p>前者是使用版本库中指定 commit（某个历史版本）恢复暂存区中所有文件；后者是恢复指定文件。</p><p><strong>注意，</strong><br>恢复所有文件时，版本库中指定<code>&lt;commit id&gt;</code>后面的所有 commit 都会被丢弃，这会导致后面的历史版本丢失，相当于重置了最新的历史版本；而恢复部分文件时，版本库中的所有 commit 保持不变，版本库中之前的最新版本仍是现在的最新版本，从而不会导致历史版本丢失。</p><h3 id="版本库-–-gt-both-暂存区-and-工作目录"><a href="#版本库-–-gt-both-暂存区-and-工作目录" class="headerlink" title="版本库 –&gt; both 暂存区 and 工作目录"></a>版本库 –&gt; both 暂存区 and 工作目录</h3><h4 id="版本库的最新版本-–-gt-both-暂存区-and-工作目录"><a href="#版本库的最新版本-–-gt-both-暂存区-and-工作目录" class="headerlink" title="版本库的最新版本 –&gt; both 暂存区 and 工作目录"></a>版本库的最新版本 –&gt; both 暂存区 and 工作目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure><p>用版本库中的最新版本恢复暂存区和工作目录中的所有文件。</p><p>此时，</p><ol><li>暂存区和工作目录中的文件与版本库保持一致；</li><li>暂存区和工作目录中未被提交到版本库的修改将被丢弃。</li></ol><p><strong>注意，</strong><br>使用<code>--hard</code>时，只能恢复所有文件，不能只恢复指定文件。</p><h4 id="版本库的指定版本-–-gt-both-暂存区-and-工作目录"><a href="#版本库的指定版本-–-gt-both-暂存区-and-工作目录" class="headerlink" title="版本库的指定版本 –&gt; both 暂存区 and 工作目录"></a>版本库的指定版本 –&gt; both 暂存区 and 工作目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><p>使用版本库中指定 commit（某个历史版本）恢复暂存区中的所有文件。</p><p><strong>注意，</strong></p><ol><li>使用<code>--hard</code>时，只能恢复所有文件，不能只恢复指定文件；</li><li>使用<code>--hard</code>时，版本库中的最新版本会重置为指定版本，这会导致指定版本之后的所有版本都丢失。</li></ol><h3 id="暂存区-–-gt-工作目录"><a href="#暂存区-–-gt-工作目录" class="headerlink" title="暂存区 –&gt; 工作目录"></a>暂存区 –&gt; 工作目录</h3><p>方式一，使用<code>版本库--&gt;暂存区</code>的命令，从而暂存区中未提交到版本库中的修改会被放回工作目录。</p><p>方式二，撤回暂存区中的修改到工作目录，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore --staged &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><p>此时，会将从工作目录提交到暂存区的修改撤回到工作目录。</p><h3 id="撤销工作目录中的修改"><a href="#撤销工作目录中的修改" class="headerlink" title="撤销工作目录中的修改"></a>撤销工作目录中的修改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><h3 id="工作目录-–-gt-版本库"><a href="#工作目录-–-gt-版本库" class="headerlink" title="工作目录 –&gt; 版本库"></a>工作目录 –&gt; 版本库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m &quot;some message for describing this commit&quot;</span><br></pre></td></tr></table></figure><p>这里的<code>-a</code>是指将工作目录中的修改直接提交到版本库，从而省去了添加到暂存区的步骤。</p><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="分支的应用场景"><a href="#分支的应用场景" class="headerlink" title="分支的应用场景"></a>分支的应用场景</h2><p>包括但不限于如下场景，</p><ol><li>一个分支是一个版本</li></ol><p>例如，应用程序 v1.0 和 v2.0 都在持续更新版本，那么，v1.0 和 v2.0 可以分别作为两个分支。</p><ol start="2"><li>一个分支是一个开发阶段</li></ol><p>例如，对于同一个版本的应用程序，可能分为测试版和稳定版，那么，<br>    1. 测试版和稳定版可以分别作为两个分支；<br>    2. 测试版经过一系列迭代之后并入稳定版。</p><ol start="3"><li>一个分支是一个特性开发</li></ol><p>例如，应用程序在主线开发之外需要引入一个新的特性、或者修复一个紧急 bug，此时，<br>    1. 在主线之外创建一个分支；<br>    2. 在特性开发完成、或者 bug 修复之后，将该分支并入主线。</p><ol start="4"><li>一个分支是一个开发模块</li></ol><p>例如，应用程序分为前端开发和后端开发，那么，<br>    1. 前端开发和后端开发可以分别作为两个并行推进；<br>    2. 当前端开发和后端开发都完成后，将两个分支合并到一起。</p><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><p>列出所有分支名称，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p><img src="/wiki/4958/images/git-branch.png" alt="git-branch" title="show all branches"></p><p>其中，<code>*</code>表示当前分支。</p><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><ol><li>创建新分支，但不切换到新分支，</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;new-branch-name&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><p>如果不指定<code>&lt;commit-id&gt;</code>，默认从当前分支的最新 commit 创建分支。</p><ol start="2"><li>创建分支，并且切换到新的分支，</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;new-branch-name&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><p>如果不指定<code>&lt;commit-id&gt;</code>，默认从当前分支的最新 commit 创建分支。</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><p><strong>注意，</strong></p><ol><li>使用<code>-d</code>时，要删除的分支必须已经并入了当前分支，否则删除失败；</li><li>如果确定不再需要待删除的分支、并且不想将其并入当前分支，可以使用<code>git branch -D &lt;branch-name&gt;</code>；</li><li>待删除的分支不能是当前分支，需要离开这个分支、然后才能删除它。</li></ol><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><p>将<code>&lt;branch-name&gt;</code>指定的分支并入到当前分支。</p><h1 id="比较不同"><a href="#比较不同" class="headerlink" title="比较不同"></a>比较不同</h1><h2 id="比较工作目录和暂存区的不同"><a href="#比较工作目录和暂存区的不同" class="headerlink" title="比较工作目录和暂存区的不同"></a>比较工作目录和暂存区的不同</h2><ol><li>比较所有文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><ol start="2"><li>比较指定文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff -- &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><h2 id="比较工作目录和指定-commit-的不同"><a href="#比较工作目录和指定-commit-的不同" class="headerlink" title="比较工作目录和指定 commit 的不同"></a>比较工作目录和指定 commit 的不同</h2><ol><li>比较所有文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>比较指定文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit-id&gt; -- &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><h2 id="比较暂存区和指定-commit-的不同"><a href="#比较暂存区和指定-commit-的不同" class="headerlink" title="比较暂存区和指定 commit 的不同"></a>比较暂存区和指定 commit 的不同</h2><ol><li>比较所有文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>比较指定文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached &lt;commit-id&gt; -- &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><h2 id="比较两个-commit-的不同"><a href="#比较两个-commit-的不同" class="headerlink" title="比较两个 commit 的不同"></a>比较两个 commit 的不同</h2><ol><li>比较所有文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit-id&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>比较指定文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit-id&gt; &lt;commit-id&gt; -- &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><p><br/>–end–<br/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;引用官方介绍，如下，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Git is a free and open source distribut</summary>
      
    
    
    
    <category term="基础工具" scheme="https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/"/>
    
    <category term="git" scheme="https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/git/"/>
    
    
    <category term="L1" scheme="https://zhisefu.com/tags/L1/"/>
    
    <category term="教程" scheme="https://zhisefu.com/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="git" scheme="https://zhisefu.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>yum常用命令</title>
    <link href="https://zhisefu.com/wiki/36377/"/>
    <id>https://zhisefu.com/wiki/36377/</id>
    <published>2023-01-27T13:57:46.000Z</published>
    <updated>2023-02-20T10:48:28.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><h2 id="列出所有已安装的软件包"><a href="#列出所有已安装的软件包" class="headerlink" title="列出所有已安装的软件包"></a>列出所有已安装的软件包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed</span><br></pre></td></tr></table></figure><p>其中，<code>installed</code>表示仅列出<strong>已安装</strong>的软件包。</p><h2 id="列出某个已经安装的软件包"><a href="#列出某个已经安装的软件包" class="headerlink" title="列出某个已经安装的软件包"></a>列出某个已经安装的软件包</h2><p>以 git 为例，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed git*</span><br></pre></td></tr></table></figure><p>其中，</p><ol><li><code>installed</code>限定范围为<strong>已安装</strong>的软件包；</li><li><code>*</code>是通配符，<code>git*</code>限定范围为所有名称以 git 为前缀的软件包。</li></ol><h2 id="列出某个已经安装和可以安装的软件包"><a href="#列出某个已经安装和可以安装的软件包" class="headerlink" title="列出某个已经安装和可以安装的软件包"></a>列出某个已经安装和可以安装的软件包</h2><p>以 git 为例，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list git*</span><br></pre></td></tr></table></figure><p>其中，</p><ol><li>这里没有<code>installed</code>做限定，因此，会列出所有<strong>已安装</strong>和<strong>可安装</strong>的软件包；</li><li>如上所述，<code>*</code>是通配符，<code>git*</code>限定范围为所有名称以 git 为前缀的软件包。</li></ol><h2 id="列出所有可更新的软件包"><a href="#列出所有可更新的软件包" class="headerlink" title="列出所有可更新的软件包"></a>列出所有可更新的软件包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list updates</span><br></pre></td></tr></table></figure><p>其中，<code>updates</code>限定了<strong>已安装且有更新</strong>的软件包。</p><h2 id="列出可安装的软件包"><a href="#列出可安装的软件包" class="headerlink" title="列出可安装的软件包"></a>列出可安装的软件包</h2><p>以 git 为例，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search git</span><br></pre></td></tr></table></figure><p>其中，<code>search</code>表示在 yum 源中查找<strong>名称</strong>或<strong>描述</strong>中包含<code>git</code>这个字符串的软件包。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装某个软件包和相关依赖包"><a href="#安装某个软件包和相关依赖包" class="headerlink" title="安装某个软件包和相关依赖包"></a>安装某个软件包和相关依赖包</h2><p>以 git 为例，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><p>如果不加<code>-y</code>，会有提示，需要交互式确认，</p><p><img src="/wiki/36377/images/yum-install-y-no.png" alt="yum-install-y-no" title="yum install git"></p><p>其中，<strong>y</strong> 表示 yes，<strong>d</strong> 表示 download only，<strong>N</strong> 表示 No。</p><p>命令中<code>-y</code>的作用就是取消交互式提示、都按输入 <strong>y</strong> 处理。</p><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><h2 id="删除某个已经安装的软件包"><a href="#删除某个已经安装的软件包" class="headerlink" title="删除某个已经安装的软件包"></a>删除某个已经安装的软件包</h2><p>以 git 为例，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove -y git*</span><br></pre></td></tr></table></figure><ol><li>如果不加<code>-y</code>，会有提示，需要交互式确认，</li></ol><p><img src="/wiki/36377/images/yum-remove-y-no.png" alt="yum-remove-y-no" title="yum remove git*"></p><p>其中，<strong>y</strong> 表示 yes，<strong>N</strong> 表示 No。</p><p>命令中<code>-y</code>的作用就是取消交互式提示、都按输入 <strong>y</strong> 处理。</p><ol start="2"><li><p>删除软件包时，会自动将相关依赖的软件包一并删除。</p></li><li><p>命令中<code>git*</code>表示删除所有名称以 git 为前缀的软件包。</p></li></ol><p><strong>注意，</strong><br>使用通配符 * 删除前，最好先通过<code>yum list installed git*</code>查看一下已经安装的以<code>git</code>为前缀的软件包、确认是不是都是待删除的，避免误删。</p><p><br/>— end —<br/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;查看&quot;&gt;&lt;a href=&quot;#查看&quot; class=&quot;headerlink&quot; title=&quot;查看&quot;&gt;&lt;/a&gt;查看&lt;/h1&gt;&lt;h2 id=&quot;列出所有已安装的软件包&quot;&gt;&lt;a href=&quot;#列出所有已安装的软件包&quot; class=&quot;headerlink&quot; title=&quot;列出所</summary>
      
    
    
    
    <category term="基础工具" scheme="https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/"/>
    
    <category term="yum" scheme="https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/yum/"/>
    
    
    <category term="L1" scheme="https://zhisefu.com/tags/L1/"/>
    
    <category term="总结" scheme="https://zhisefu.com/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="yum" scheme="https://zhisefu.com/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>通过yum安装高版本git</title>
    <link href="https://zhisefu.com/wiki/927/"/>
    <id>https://zhisefu.com/wiki/927/</id>
    <published>2023-01-27T13:50:49.000Z</published>
    <updated>2023-02-20T10:48:35.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>直接使用<code>yum install -y git</code>，安装的 git 版本会比较老。</p><p>对此，官方文档说明如下，</p><blockquote><p>Red Hat Enterprise Linux, Oracle Linux, CentOS, Scientific Linux, et al.<br>RHEL and derivatives typically ship older versions of git. You can download a tarball and build from source, or use a 3rd-party repository such as the IUS Community Project to obtain a more recent version of git.</p></blockquote><p>参考，<br><a href="https://git-scm.com/download/linux">https://git-scm.com/download/linux</a></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>根据上述官方文档的描述，解决办法有如下两种，</p><ol><li>通过源码构建；</li><li>使用第三方安装源。</li></ol><p>这里以使用第三方源 <a href="https://ius.io/">IUS Community Project</a> 为例，安装高版本 git 步骤如下，</p><ol><li>检查 git 是否已经安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum list installed git*</span><br></pre></td></tr></table></figure><p>如果 git 已经安装，先删除，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove -y git*</span><br></pre></td></tr></table></figure><ol start="2"><li>更新 yum 源</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y \ </span><br><span class="line">https://repo.ius.io/ius-release-el7.rpm \ </span><br><span class="line">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br></pre></td></tr></table></figure><p>参考，<br><a href="https://ius.io/setup">https://ius.io/setup</a></p><ol start="3"><li>安装 git</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y git236</span><br></pre></td></tr></table></figure><p>其中，<code>git236</code>是 <a href="https://ius.io/">IUS Community Project</a> 中的项目；更多 IUS 项目可以在 <a href="https://github.com/search?q=org:iusrepo+topic:rpm&type=repositories">https://github.com/search?q=org%3Aiusrepo+topic%3Arpm&amp;type=repositories</a> 中查找。</p><p><br/>—end—<br/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;直接使用&lt;code&gt;yum install -y git&lt;/code&gt;，安装的 git 版本会比较老。&lt;/p&gt;
&lt;p&gt;对此，</summary>
      
    
    
    
    <category term="基础工具" scheme="https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/"/>
    
    <category term="git" scheme="https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/git/"/>
    
    
    <category term="L1" scheme="https://zhisefu.com/tags/L1/"/>
    
    <category term="git" scheme="https://zhisefu.com/tags/git/"/>
    
    <category term="yum" scheme="https://zhisefu.com/tags/yum/"/>
    
    <category term="问题" scheme="https://zhisefu.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
</feed>
