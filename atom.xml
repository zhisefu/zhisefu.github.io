<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山居杂记</title>
  
  <subtitle>记知识，记世界</subtitle>
  <link href="https://zhisefu.com/atom.xml" rel="self"/>
  
  <link href="https://zhisefu.com/"/>
  <updated>2023-02-18T07:52:56.161Z</updated>
  <id>https://zhisefu.com/</id>
  
  <author>
    <name>置啬夫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git教程之快速上手</title>
    <link href="https://zhisefu.com/wiki/4958/"/>
    <id>https://zhisefu.com/wiki/4958/</id>
    <published>2023-02-14T10:09:47.000Z</published>
    <updated>2023-02-18T07:52:56.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p></blockquote><p>参考，<br><a href="https://git-scm.com/">https://git-scm.com/</a></p><p>git 在本地保存了完整的版本库，既可以在本地独立管理版本，也可以和远程版本库进行同步。</p><p>这里以本地为例，介绍了 git 的基本使用。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>以 ubuntu-22.04 LTS 为例，安装命令如下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git-all</span><br></pre></td></tr></table></figure><p>安装完后，可通过<code>git --version</code>查看 git 版本，</p><p><img src="/wiki/4958/images/git-version.png" alt="git-version" title="git version"></p><p>其他操作系统安装 git 的命令可以参考官方文档：<a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">https://git-scm.com/book/en/v2/Getting-Started-Installing-Git</a></p><h1 id="必要配置"><a href="#必要配置" class="headerlink" title="必要配置"></a>必要配置</h1><p>使用 git 前，必须设置<code>user.name</code>和<code>user.email</code>。<br>这两个属性用来标识用户身份，会出现在每一次的提交信息中。</p><h2 id="设置配置"><a href="#设置配置" class="headerlink" title="设置配置"></a>设置配置</h2><p>设置<code>user.name</code>和<code>user.email</code>命令如下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;&lt;your-name&gt;&quot;</span><br><span class="line">git config --global user.email &quot;&lt;your-email&gt;&quot;</span><br></pre></td></tr></table></figure><p><img src="/wiki/4958/images/git-config-user.png" alt="git-config-user" title="set user"></p><p>其中，<code>--global</code>表示属性的作用范围。<code>git config</code>中一共有三个作用范围，</p><ol><li><code>--local</code>，只对当前项目生效。</li><li><code>--global</code>，对当前用户的所有项目生效。</li><li><code>--system</code>，对所有用户的所有项目生效。</li></ol><p><strong>注意，</strong></p><ol><li>如果不指定作用范围，默认是<code>--local</code>。</li><li>属性覆盖优先级：<code>--local</code> &gt; <code>--global</code> &gt; <code>--system</code>。</li></ol><h2 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h2><ol><li>查看所有级别的属性（包括<code>--local</code>、<code>--global</code>和<code>--system</code>），</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><ol start="2"><li>查看指定级别的属性，</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list --local</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list --global</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list --system</span><br></pre></td></tr></table></figure><h2 id="取消配置"><a href="#取消配置" class="headerlink" title="取消配置"></a>取消配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset &lt;property-name&gt;</span><br></pre></td></tr></table></figure><p><img src="/wiki/4958/images/git-config-unset.png" alt="git-config-unset" title="unset user.name"></p><p>此外，</p><ol><li><code>--global</code>还可以换成<code>--local</code>或者<code>--system</code>，表示撤销某个级别的属性设置。</li><li>默认是<code>--local</code>。</li></ol><h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h1><ol><li>从零开始创建项目，</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init &lt;project-root-directory-name&gt;</span><br></pre></td></tr></table></figure><p>此时，名为<code>&lt;project-root-directory-name&gt;</code>的目录会被自动创建，并且在该目录下会自动创建<code>.git</code>目录用来存储元数据。</p><ol start="2"><li>将已有项目添加 git 管理，</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;project-root-directory&gt;</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>即，在项目根目录下执行<code>git init</code>。<br>此时，会在当前目录（即，项目根目录）下创建<code>.git</code>目录用来存储元数据。</p><h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><h2 id="区域划分"><a href="#区域划分" class="headerlink" title="区域划分"></a>区域划分</h2><p>在 git 管理的项目中，某个版本的文件会位于如下四个区域之一，</p><ol><li><strong>untracked 区</strong></li></ol><p>位于该区的文件不被 git 管理。有以下两种，<br>    1. 新添加的文件。<br>    2. 在<code>.gitignore</code>文件中指定不需要 git 管理的文件。</p><ol start="2"><li><strong>工作目录</strong></li></ol><p>被 git 管理，并且当前处于修改状态的文件位于该区。</p><ol start="3"><li><strong>暂存区</strong></li></ol><p>被 git 管理，并且修改完成、等待提交到版本库的文件位于该区。</p><p>通常，并不是修改完一个文件就立即提交到版本库；而是将修改完的文件放入暂存区，待本次所有相关的文件都修改好后一次性提交到版本库。</p><ol start="4"><li><strong>版本库</strong></li></ol><p>被 git 管理，并且作为历史版本被记录；后面可以随时回到这个版本。</p><h2 id="区域转换"><a href="#区域转换" class="headerlink" title="区域转换"></a>区域转换</h2><h3 id="untracked-区-x2F-工作目录-–-gt-暂存区"><a href="#untracked-区-x2F-工作目录-–-gt-暂存区" class="headerlink" title="untracked 区&#x2F;工作目录 –&gt; 暂存区"></a>untracked 区&#x2F;工作目录 –&gt; 暂存区</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add --all</span><br></pre></td></tr></table></figure><p>前者是将指定文件添加到暂存区（即，交给 git 管理）；后者是将所有新文件添加到暂存区。</p><p>可以通过<code>git status</code>查看文件状态。</p><p><img src="/wiki/4958/images/git-add-new.png" alt="git-add-new" title="add new file"></p><h3 id="暂存区-–-gt-版本库"><a href="#暂存区-–-gt-版本库" class="headerlink" title="暂存区 –&gt; 版本库"></a>暂存区 –&gt; 版本库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit &lt;file-name&gt;... -m &quot;some message for describing this commit&quot;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;some message for describing this commit&quot;</span><br></pre></td></tr></table></figure><p>前者是将指定文件从暂存区提交到版本库；后者是将暂存区所有文件提交到版本库。</p><p>可以通过<code>git log --all --graph</code>查看所有历史提交。</p><p><img src="/wiki/4958/images/git-commit.png" alt="git-commit" title="commit files"></p><p>此后，被提交到版本库的文件就多了一个历史版本，之后可以随时回到任意一个历史版本。</p><h3 id="版本库（最新版本）-–-gt-暂存区"><a href="#版本库（最新版本）-–-gt-暂存区" class="headerlink" title="版本库（最新版本） –&gt; 暂存区"></a>版本库（最新版本） –&gt; 暂存区</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --mixed</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset -- &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><p>前者是用版本库中的最新版本恢复暂存区中的所有文件；后者是恢复指定文件。</p><p>此时，</p><ol><li>暂存区中的相关文件会与版本库中的最新版本保持一致。</li><li>暂存区中没被提交到版本库的修改退回到了工作目录中。</li></ol><h3 id="版本库（最新版本）-–-gt-both-暂存区-and-工作目录"><a href="#版本库（最新版本）-–-gt-both-暂存区-and-工作目录" class="headerlink" title="版本库（最新版本） –&gt; both 暂存区 and 工作目录"></a>版本库（最新版本） –&gt; both 暂存区 and 工作目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure><p>用版本库中的最新版本恢复暂存区和工作目录中的所有文件。</p><p>此时，</p><ol><li>暂存区和工作目录中的文件与版本库保持一致。</li><li>暂存区和工作目录中未被提交到版本库的修改将被丢弃。</li></ol><p><strong>注意：</strong> 使用<code>--hard</code>时，只能恢复所有文件，不能只恢复指定文件。</p><h3 id="版本库（指定版本）-–-gt-暂存区"><a href="#版本库（指定版本）-–-gt-暂存区" class="headerlink" title="版本库（指定版本） –&gt; 暂存区"></a>版本库（指定版本） –&gt; 暂存区</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --mixed &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;commit-id&gt; -- &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><p>前者是使用版本库中指定 commit（某个历史版本）恢复暂存区中所有文件；后者是恢复指定文件。</p><p><strong>注意：</strong> 恢复所有文件时，版本库中指定<code>&lt;commit id&gt;</code>后面的所有 commit 都会被丢弃，这会导致后面的历史版本丢失，相当于重置了最新的历史版本；而恢复部分文件时，版本库中的所有 commit 保持不变，版本库中之前的最新版本仍是现在的最新版本，从而不会导致历史版本丢失。</p><h3 id="版本库（指定版本）-–-gt-both-暂存区-and-工作目录"><a href="#版本库（指定版本）-–-gt-both-暂存区-and-工作目录" class="headerlink" title="版本库（指定版本） –&gt; both 暂存区 and 工作目录"></a>版本库（指定版本） –&gt; both 暂存区 and 工作目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><p>使用版本库中指定 commit（某个历史版本）恢复暂存区中的所有文件。</p><p><strong>注意，</strong></p><ol><li>使用<code>--hard</code>时，只能恢复所有文件，不能只恢复指定文件。</li><li>使用<code>--hard</code>时，版本库中的最新版本会重置为指定版本，这会导致指定版本之后的所有版本都丢失。</li></ol><h3 id="暂存区-–-gt-工作目录"><a href="#暂存区-–-gt-工作目录" class="headerlink" title="暂存区 –&gt; 工作目录"></a>暂存区 –&gt; 工作目录</h3><p>方式一，使用<code>版本库--&gt;暂存区</code>的命令，从而暂存区中未提交到版本库中的修改会被放回工作目录。</p><p>方式二，撤回暂存区中的修改到工作目录，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore --staged &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><p>此时，会将从工作目录提交到暂存区的修改撤回到工作目录。</p><h3 id="工作目录-–-gt-untracked-区"><a href="#工作目录-–-gt-untracked-区" class="headerlink" title="工作目录 –&gt; untracked 区"></a>工作目录 –&gt; untracked 区</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><p>即，撤销工作目录中指定文件的修改。</p><h3 id="工作目录-–-gt-版本库"><a href="#工作目录-–-gt-版本库" class="headerlink" title="工作目录 –&gt; 版本库"></a>工作目录 –&gt; 版本库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m &quot;some message for describing this commit&quot;</span><br></pre></td></tr></table></figure><p>这里的<code>-a</code>是指将工作目录中的修改直接提交到版本库，从而省去了添加到暂存区的步骤。</p><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="分支的应用场景"><a href="#分支的应用场景" class="headerlink" title="分支的应用场景"></a>分支的应用场景</h2><p>包括但不限于如下，</p><ul><li>场景一：一个分支是一个版本</li></ul><p>例如，应用程序 v1.0 和 v2.0 都在持续更新版本，那么，<br>    - v1.0 和 v2.0 可以分别作为两个分支。</p><ul><li>场景二：一个分支是一个开发阶段</li></ul><p>例如，对于同一个版本的应用程序，可能分为测试版和稳定版，那么，<br>    - 测试版和稳定版可以分别作为两个分支，<br>    - 测试版经过一系列迭代之后并入稳定版。</p><ul><li>场景三：一个分支是一个特性开发</li></ul><p>例如，应用程序在主线开发之外需要引入一个新的特性、或者修复一个紧急 bug，此时，<br>    - 在主线之外创建一个分支，<br>    - 在特性开发完成、或者 bug 修复之后，将该分支并入主线。</p><ul><li>场景四：一个分支是一个开发模块</li></ul><p>例如，应用程序分为前端开发和后端开发，那么，<br>    - 前端开发和后端开发可以分别作为两个并行推进，<br>    - 当前端开发和后端开发都完成后，将两个分支合并到一起。</p><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><p>列出所有分支名称，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p><img src="/wiki/4958/images/git-branch.png" alt="git-branch" title="show all branches"></p><p>其中，<code>*</code>表示当前分支。</p><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><ol><li>创建新分支，但不切换到新分支，</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;new-branch-name&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><p>如果不指定<code>&lt;commit-id&gt;</code>，默认从当前分支的最新 commit 创建分支。</p><ol start="2"><li>创建分支，并且切换到新的分支，</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;new-branch-name&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><p>如果不指定<code>&lt;commit-id&gt;</code>，默认从当前分支的最新 commit 创建分支。</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><p><strong>注意，</strong></p><ol><li><p>使用<code>-d</code>时，要删除的分支必须已经并入了当前分支，否则删除失败。</p></li><li><p>如果确定不再需要待删除的分支、并且不想将其并入当前分支，可以使用<code>git branch -D &lt;branch-name&gt;</code>。</p></li><li><p>待删除的分支不能是当前分支，需要离开这个分支、然后才能删除它。</p></li></ol><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><p>将<code>&lt;branch-name&gt;</code>指定的分支并入到当前分支。</p><h1 id="比较不同"><a href="#比较不同" class="headerlink" title="比较不同"></a>比较不同</h1><h2 id="比较工作目录和暂存区的不同"><a href="#比较工作目录和暂存区的不同" class="headerlink" title="比较工作目录和暂存区的不同"></a>比较工作目录和暂存区的不同</h2><ol><li>比较所有文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><ol start="2"><li>比较指定文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff -- &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><h2 id="比较工作目录和指定-commit-的不同"><a href="#比较工作目录和指定-commit-的不同" class="headerlink" title="比较工作目录和指定 commit 的不同"></a>比较工作目录和指定 commit 的不同</h2><ol><li>比较所有文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>比较指定文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit-id&gt; -- &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><h2 id="比较暂存区和指定-commit-的不同"><a href="#比较暂存区和指定-commit-的不同" class="headerlink" title="比较暂存区和指定 commit 的不同"></a>比较暂存区和指定 commit 的不同</h2><ol><li>比较所有文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>比较指定文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached &lt;commit-id&gt; -- &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><h2 id="比较两个-commit-的不同"><a href="#比较两个-commit-的不同" class="headerlink" title="比较两个 commit 的不同"></a>比较两个 commit 的不同</h2><ol><li>比较所有文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit-id&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>比较指定文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit-id&gt; &lt;commit-id&gt; -- &lt;file-name&gt;...</span><br></pre></td></tr></table></figure><p><br/>–end–<br/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Git is a free and open source distributed version control</summary>
      
    
    
    
    <category term="基础工具" scheme="https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/"/>
    
    <category term="git" scheme="https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/git/"/>
    
    
    <category term="L1" scheme="https://zhisefu.com/tags/L1/"/>
    
    <category term="git" scheme="https://zhisefu.com/tags/git/"/>
    
    <category term="系列教程" scheme="https://zhisefu.com/tags/%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>yum常用命令</title>
    <link href="https://zhisefu.com/wiki/36377/"/>
    <id>https://zhisefu.com/wiki/36377/</id>
    <published>2023-01-27T13:57:46.000Z</published>
    <updated>2023-02-18T07:31:26.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><h2 id="列出所有已安装的软件包"><a href="#列出所有已安装的软件包" class="headerlink" title="列出所有已安装的软件包"></a>列出所有已安装的软件包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed</span><br></pre></td></tr></table></figure><p>其中，<code>installed</code>表示仅列出<strong>已安装</strong>的软件包。</p><h2 id="列出某个已经安装的软件包"><a href="#列出某个已经安装的软件包" class="headerlink" title="列出某个已经安装的软件包"></a>列出某个已经安装的软件包</h2><p>以 git 为例，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed git*</span><br></pre></td></tr></table></figure><p>其中，</p><ol><li><code>installed</code>限定范围为<strong>已安装</strong>的软件包；</li><li><code>*</code>是通配符，<code>git*</code>限定范围为所有名称以 git 为前缀的软件包。</li></ol><h2 id="列出某个已经安装和可以安装的软件包"><a href="#列出某个已经安装和可以安装的软件包" class="headerlink" title="列出某个已经安装和可以安装的软件包"></a>列出某个已经安装和可以安装的软件包</h2><p>以 git 为例，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list git*</span><br></pre></td></tr></table></figure><ol><li>这里没有<code>installed</code>做限定，因此，会列出所有<strong>已安装</strong>和<strong>未安装</strong>的软件包。</li><li>如上所述，<code>*</code>是通配符，<code>git*</code>限定范围为所有名称以 git 为前缀的软件包。</li></ol><h2 id="列出所有可更新的软件包"><a href="#列出所有可更新的软件包" class="headerlink" title="列出所有可更新的软件包"></a>列出所有可更新的软件包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list updates</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 列出可安装的软件包</span><br><span class="line"></span><br><span class="line">以 git 为例，</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>yum search git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```search```表示在 yum 源中查找**名称**或**描述**中包含```git```这个字符串的软件包。</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line"></span><br><span class="line">## 安装某个软件包和相关依赖包</span><br><span class="line"></span><br><span class="line">以 git 为例，</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>yum install -y git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果不加```-y```，会有提示，需要交互式确认，</span><br><span class="line"></span><br><span class="line">![yum-install-y-no](images/yum-install-y-no.png &quot;yum install git&quot;)</span><br><span class="line"></span><br><span class="line">其中，**y** 表示 yes，**d** 表示 download only，**N** 表示 No。</span><br><span class="line"></span><br><span class="line">```-y```的作用就是取消交互式提示、都按输入 **y** 处理。</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line"></span><br><span class="line">## 删除某个已经安装的软件包</span><br><span class="line"></span><br><span class="line">以 git 为例，</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>yum remove -y git*</p><pre><code>1. 如果不加```-y```，会有提示，需要交互式确认，![yum-remove-y-no](images/yum-remove-y-no.png &quot;yum remove git*&quot;)其中，**y** 表示 yes，**N** 表示 No。```-y```的作用就是取消交互式提示、都按输入 **y** 处理。2. 删除软件包时，会自动将有依赖关系的软件包一并删除。3. ```git*```表示删除所有名称以 git 为前缀的软件包。**注意：** 使用通配符 * 删除前，最好先通过```yum list installed git*```查看一下已经安装的以```git```为前缀的软件包、确认是不是都是待删除的，避免误删。&lt;br/&gt;--- end ---&lt;br/&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;查看&quot;&gt;&lt;a href=&quot;#查看&quot; class=&quot;headerlink&quot; title=&quot;查看&quot;&gt;&lt;/a&gt;查看&lt;/h1&gt;&lt;h2 id=&quot;列出所有已安装的软件包&quot;&gt;&lt;a href=&quot;#列出所有已安装的软件包&quot; class=&quot;headerlink&quot; title=&quot;列出所</summary>
      
    
    
    
    <category term="基础工具" scheme="https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/"/>
    
    <category term="yum" scheme="https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/yum/"/>
    
    
    <category term="L1" scheme="https://zhisefu.com/tags/L1/"/>
    
    <category term="命令总结" scheme="https://zhisefu.com/tags/%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    
    <category term="yum" scheme="https://zhisefu.com/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>通过yum安装高版本git</title>
    <link href="https://zhisefu.com/wiki/927/"/>
    <id>https://zhisefu.com/wiki/927/</id>
    <published>2023-01-27T13:50:49.000Z</published>
    <updated>2023-02-18T07:51:13.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>直接使用<code>yum install -y git</code>，安装的 git 版本会比较老。</p><p>对此，官方文档说明如下，</p><blockquote><p>Red Hat Enterprise Linux, Oracle Linux, CentOS, Scientific Linux, et al.<br>RHEL and derivatives typically ship older versions of git. You can download a tarball and build from source, or use a 3rd-party repository such as the IUS Community Project to obtain a more recent version of git.</p></blockquote><p>参考，<br><a href="https://git-scm.com/download/linux">https://git-scm.com/download/linux</a></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>根据上述官方文档的描述，解决办法有如下两种：</p><ol><li>通过源码构建。</li><li>使用第三方安装源。</li></ol><p>这里以使用第三方源 <a href="https://ius.io/">IUS Community Project</a> 为例，安装高版本 git 步骤如下，</p><ol><li>检查 git 是否已经安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum list installed git*</span><br></pre></td></tr></table></figure><p>如果 git 已经安装，先删除，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove -y git*</span><br></pre></td></tr></table></figure><ol start="2"><li>更新 yum 源</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y \ </span><br><span class="line">https://repo.ius.io/ius-release-el7.rpm \ </span><br><span class="line">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br></pre></td></tr></table></figure><p>参考，<br><a href="https://ius.io/setup">https://ius.io/setup</a></p><ol start="3"><li>安装 git</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y git236</span><br></pre></td></tr></table></figure><p>其中，<code>git236</code>是 <a href="https://ius.io/">IUS Community Project</a> 中的项目；更多 IUS 项目可以在 <a href="https://github.com/search?q=org:iusrepo+topic:rpm&type=repositories">https://github.com/search?q=org%3Aiusrepo+topic%3Arpm&amp;type=repositories</a> 中查找。</p><p><br/>—end—<br/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;直接使用&lt;code&gt;yum install -y git&lt;/code&gt;，安装的 git 版本会比较老。&lt;/p&gt;
&lt;p&gt;对此，</summary>
      
    
    
    
    <category term="基础工具" scheme="https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/"/>
    
    <category term="git" scheme="https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/git/"/>
    
    
    <category term="L1" scheme="https://zhisefu.com/tags/L1/"/>
    
    <category term="yum" scheme="https://zhisefu.com/tags/yum/"/>
    
    <category term="问题解决" scheme="https://zhisefu.com/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    <category term="git" scheme="https://zhisefu.com/tags/git/"/>
    
  </entry>
  
</feed>
