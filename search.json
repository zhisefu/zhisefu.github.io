[{"title":"git教程之快速上手","url":"/2023/02/14/git%E6%95%99%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/","content":"安装以 ubuntu-22.04 LTS 为例，安装命令如下，\nsudo apt install git-all\n\n安装完毕后，可通过git --version查看 git 版本，\n\n其他操作系统安装 git 的命令可以参考官方文档：https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\n必要配置使用 git 前，必须设置user.name和user.email。这两个属性用来标识用户身份，会出现在每一次的提交信息中。\n设置配置设置user.name和user.email命令如下，\ngit config --global user.name &quot;&lt;your-name&gt;&quot;git config --global user.email &quot;&lt;your-email&gt;&quot;\n\n\n其中，--global表示属性的作用范围。git config中一共有三个作用范围，\n\n--local，只对当前项目生效。\n--global，对当前用户的所有项目生效。\n--system，对所有用户的所有项目生效。\n\n注意，\n\n如果不指定作用范围，默认是--local。\n属性优先级：--local &gt; --global &gt; --system。\n\n查看配置\n查看所有级别的属性（包括--local、--global和--system），\n\ngit config --list\n\n\n查看指定级别的属性，\n\ngit config --list --local\n\ngit config --list --global\n\ngit config --list --system\n\n取消配置git config --global --unset &lt;property-name&gt;\n\n\n此外，\n\n--global还可以换成--local或者--system，表示撤销某个级别的属性设置。\n默认是--local。\n\n初始化项目\n从零开始创建项目，\n\ngit init &lt;project-root-directory-name&gt;\n\n此时，名为&lt;project-root-directory-name&gt;的目录会被自动创建，并且在该目录下会自动创建.git目录用来存储元数据。\n\n将已有项目添加 git 管理，\n\ncd &lt;project-root-directory&gt;git init\n\n即，在项目根目录下执行git init。此时，会在当前目录（即，项目根目录）下创建.git目录用来存储元数据。\n文件管理区域划分在 git 管理的项目中，某个版本的文件会位于如下四个区域之一，\n\nuntracked 区\n\n位于该区的文件不被 git 管理。有以下两种，    1. 新添加的文件。    2. 在.gitignore文件中指定不需要 git 管理的文件。\n\n工作目录\n\n被 git 管理，并且当前处于修改状态的文件位于该区。\n\n暂存区\n\n被 git 管理，并且修改完成、等待提交到版本库的文件位于该区。\n通常，并不是修改完一个文件就立即提交到版本库；而是将修改完的文件放入暂存区，待本次所有相关的文件都修改好后一次性提交到版本库。\n\n版本库\n\n被 git 管理，并且作为历史版本被记录；后面可以随时回到这个版本。\n区域转换untracked 区&#x2F;工作目录 –&gt; 暂存区git add &lt;file-name&gt;...\n\n或\ngit add --all\n\n前者是将指定文件添加到暂存区（即，交给 git 管理）；后者是将所有新文件添加到暂存区。\n可以通过git status查看文件状态。\n\n暂存区 –&gt; 版本库git commit &lt;file-name&gt;... -m &quot;some message for describing this commit&quot;\n\n或\ngit commit -m &quot;some message for describing this commit&quot;\n\n前者是将指定文件从暂存区提交到版本库；后者是将暂存区所有文件提交到版本库。\n可以通过git log --all --graph查看所有历史提交。\n\n此后，被提交到版本库的文件就多了一个历史版本，之后可以随时回到任意一个历史版本。\n版本库（最新版本） –&gt; 暂存区git reset --mixed\n\n或\ngit reset -- &lt;file-name&gt;...\n\n前者是用版本库中的最新版本恢复暂存区中的所有文件；后者是恢复指定文件。\n此时，\n\n暂存区中的相关文件会与版本库中的最新版本保持一致。\n暂存区中没被提交到版本库的修改退回到了工作目录中。\n\n版本库（最新版本） –&gt; both 暂存区 and 工作目录git reset --hard\n\n用版本库中的最新版本恢复暂存区和工作目录中的所有文件。\n此时，\n\n暂存区和工作目录中的文件与版本库保持一致。\n暂存区和工作目录中未被提交到版本库的修改将被丢弃。\n\n注意： 使用--hard时，只能恢复所有文件，不能只恢复指定文件。\n版本库（指定版本） –&gt; 暂存区git reset --mixed &lt;commit-id&gt;\n\n或\ngit reset &lt;commit-id&gt; -- &lt;file-name&gt;...\n\n前者是使用版本库中指定 commit（某个历史版本）恢复暂存区中所有文件；后者是恢复指定文件。\n注意： 恢复所有文件时，版本库中指定&lt;commit id&gt;后面的所有 commit 都会被丢弃，这会导致后面的历史版本丢失，相当于重置了最新的历史版本；而恢复部分文件时，版本库中的所有 commit 保持不变，版本库中之前的最新版本仍是现在的最新版本，从而不会导致历史版本丢失。\n版本库（指定版本） –&gt; both 暂存区 and 工作目录git reset --hard &lt;commit-id&gt;\n\n使用版本库中指定 commit（某个历史版本）恢复暂存区中的所有文件。\n注意，\n\n使用--hard时，只能恢复所有文件，不能只恢复指定文件。\n使用--hard时，版本库中的最新版本会重置为指定版本，这会导致指定版本之后的所有版本都丢失。\n\n暂存区 –&gt; 工作目录方式一，使用版本库--&gt;暂存区的命令，从而暂存区中未提交到版本库中的修改会被放回工作目录。\n方式二，撤回暂存区中的修改到工作目录，\ngit restore --staged &lt;file-name&gt;...\n\n此时，会将从工作目录提交到暂存区的修改撤回到工作目录。\n工作目录 –&gt; untracked 区git restore &lt;file-name&gt;...\n\n即，撤销工作目录中指定文件的修改。\n工作目录 –&gt; 版本库git commit -a -m &quot;some message for describing this commit&quot;\n\n这里的-a是指将工作目录中的修改直接提交到版本库，从而省去了添加到暂存区的步骤。\n分支分支的应用场景包括但不限于如下，\n\n场景一：一个分支是一个版本\n\n例如，应用程序 v1.0 和 v2.0 都在持续更新版本，那么，    - v1.0 和 v2.0 可以分别作为两个分支。\n\n场景二：一个分支是一个开发阶段\n\n例如，对于同一个版本的应用程序，可能分为测试版和稳定版，那么，    - 测试版和稳定版可以分别作为两个分支，    - 测试版经过一系列迭代之后并入稳定版。\n\n场景三：一个分支是一个特性开发\n\n例如，应用程序在主线开发之外需要引入一个新的特性、或者修复一个紧急 bug，此时，    - 在主线之外创建一个分支，    - 在特性开发完成、或者 bug 修复之后，将该分支并入主线。\n\n场景四：一个分支是一个开发模块\n\n例如，应用程序分为前端开发和后端开发，那么，    - 前端开发和后端开发可以分别作为两个并行推进，    - 当前端开发和后端开发都完成后，将两个分支合并到一起。\n查看分支列出所有分支名称，\ngit branch\n\n\n其中，*表示当前分支。\n创建分支\n创建新分支，但不切换到新分支，\n\ngit branch &lt;new-branch-name&gt; &lt;commit-id&gt;\n\n如果不指定&lt;commit-id&gt;，默认从当前分支的最新 commit 创建分支。\n\n创建分支，并且切换到新的分支，\n\ngit checkout -b &lt;new-branch-name&gt; &lt;commit-id&gt;\n\n如果不指定&lt;commit-id&gt;，默认从当前分支的最新 commit 创建分支。\n删除分支git branch -d &lt;branch-name&gt;\n\n注意，\n\n使用-d时，要删除的分支必须已经并入了当前分支，否则删除失败。\n\n如果确定不再需要待删除的分支、并且不想将其并入当前分支，可以使用git branch -D &lt;branch-name&gt;。\n\n待删除的分支不能是当前分支，需要离开这个分支、然后才能删除它。\n\n\n切换分支git checkout &lt;branch-name&gt;\n\n合并分支git merge &lt;branch-name&gt;\n\n将&lt;branch-name&gt;指定的分支并入到当前分支。\n比较不同比较工作目录和暂存区的不同\n比较所有文件\n\ngit diff\n\n\n比较指定文件\n\ngit diff -- &lt;file-name&gt;...\n\n比较工作目录和指定 commit 的不同\n比较所有文件\n\ngit diff &lt;commit-id&gt;\n\n\n比较指定文件\n\ngit diff &lt;commit-id&gt; -- &lt;file-name&gt;...\n\n比较暂存区和指定 commit 的不同\n比较所有文件\n\ngit diff --cached &lt;commit-id&gt;\n\n\n比较指定文件\n\ngit diff --cached &lt;commit-id&gt; -- &lt;file-name&gt;...\n\n比较两个 commit 的不同\n比较所有文件\n\ngit diff &lt;commit-id&gt; &lt;commit-id&gt;\n\n\n比较指定文件\n\ngit diff &lt;commit-id&gt; &lt;commit-id&gt; -- &lt;file-name&gt;...\n\n–end–\n","categories":["基础工具","git"],"tags":["L1","git"]},{"title":"yum常用命令","url":"/2023/01/27/yum%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"查看列出所有已经安装的软件包yum list installed\n\n列出某个已经安装的软件包以 git 为例，\nyum list installed git*\n\n列出某个已经安装和可以安装的软件包以 git 为例，\nyum list git*\n\n列出所有可更新的软件包yum list updates\n\n列出可安装的软件包以 git 为例，\nyum search git\n\n安装安装某个软件包和相关依赖包以 git 为例，\nyum install -y git\n\n删除删除某个已经安装的软件包以 git 为例，\nyum remove -y git*\n\n注意： 使用通配符 * 删除前，最好先通过yum list installed git*查看一下已经安装的以git为前缀的软件包、确认是不是都是待删除的，避免误删。\n— end —\n","categories":["基础工具","yum"],"tags":["L1","yum"]},{"title":"通过yum安装高版本git","url":"/2023/01/27/%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85%E9%AB%98%E7%89%88%E6%9C%ACgit/","content":"问题描述直接使用yum install -y git，安装的 git 版本会比较老。\n对此，官方文档说明如下，\n\nRed Hat Enterprise Linux, Oracle Linux, CentOS, Scientific Linux, et al.RHEL and derivatives typically ship older versions of git. You can download a tarball and build from source, or use a 3rd-party repository such as the IUS Community Project to obtain a more recent version of git.\n\nhttps://git-scm.com/download/linux\n解决方案根据上述官方文档的描述，解决办法就是：\n\n通过源码构建；\n使用第三方安装源。\n\n这里以使用第三方源 IUS Community Project 为例，安装 git 步骤如下，\n\n检查 git 是否已经安装\nsudo yum list installed git*\n\n如果 git 已经安装，先删除，\nsudo yum remove -y git*\n\n更新 yum 源\nsudo yum install -y \\https://repo.ius.io/ius-release-el7.rpm \\https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n\nhttps://ius.io/setup\n\n安装 git\nsudo yum install -y git236\n\n其中，git236是 IUS Community Project 中的项目；更多 IUS 项目可以在 https://github.com/search?q=org%3Aiusrepo+topic%3Arpm&amp;type=repositories 中查找。\n\n\n—end—\n","categories":["基础工具","git"],"tags":["L1","git"]}]