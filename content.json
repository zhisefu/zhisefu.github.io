{"meta":{"title":"山居杂记","subtitle":"记知识，记世界","description":"读书，让生活更宽广","author":"置啬夫","url":"https://zhisefu.com","root":"/"},"pages":[{"title":"About","date":"2023-02-15T06:49:12.144Z","updated":"2023-02-15T06:49:12.144Z","comments":true,"path":"about/index.html","permalink":"https://zhisefu.com/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2023-02-15T06:49:12.145Z","updated":"2023-02-15T06:49:12.145Z","comments":true,"path":"categories/index.html","permalink":"https://zhisefu.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2023-02-19T04:22:51.297Z","updated":"2023-02-19T04:22:51.297Z","comments":true,"path":"tags/index.html","permalink":"https://zhisefu.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"考古学初阶之图书信息","slug":"考古学初阶之图书信息","date":"2023-02-20T11:58:21.000Z","updated":"2023-02-20T12:01:22.907Z","comments":true,"path":"wiki/55744/","link":"","permalink":"https://zhisefu.com/wiki/55744/","excerpt":"","text":"名称： 考古学初阶作者： 严文明ISBN： 978-7-5010-5859-4出版发行： 文物出版社版次： 2018年12月第1版印次： 2021年1月第3次印刷 –end–","categories":[{"name":"考古","slug":"考古","permalink":"https://zhisefu.com/categories/%E8%80%83%E5%8F%A4/"},{"name":"《考古学初级》笔记","slug":"考古/《考古学初级》笔记","permalink":"https://zhisefu.com/categories/%E8%80%83%E5%8F%A4/%E3%80%8A%E8%80%83%E5%8F%A4%E5%AD%A6%E5%88%9D%E7%BA%A7%E3%80%8B%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"L1","slug":"L1","permalink":"https://zhisefu.com/tags/L1/"},{"name":"笔记","slug":"笔记","permalink":"https://zhisefu.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"考古","slug":"考古","permalink":"https://zhisefu.com/tags/%E8%80%83%E5%8F%A4/"}]},{"title":"git教程之快速上手","slug":"git教程之快速上手","date":"2023-02-14T10:09:47.000Z","updated":"2023-02-20T10:48:25.454Z","comments":true,"path":"wiki/4958/","link":"","permalink":"https://zhisefu.com/wiki/4958/","excerpt":"","text":"简介引用官方介绍，如下， Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. 参考，https://git-scm.com/ git 在本地保存了完整的版本库，既可以在本地独立管理版本，也可以和远程版本库进行同步。 本文以本地为例，介绍了 git 的基本使用。 安装以 ubuntu-22.04 LTS 为例，安装命令如下， 1sudo apt install git-all 安装完后，可通过git --version查看 git 版本， 其他操作系统安装 git 的命令可以参考官方文档：https://git-scm.com/book/en/v2/Getting-Started-Installing-Git 必要配置使用 git 前，必须设置user.name和user.email。 这两个属性用来标识用户身份，会出现在每一次的提交信息中。 设置配置设置user.name和user.email命令如下， 12git config --global user.name &quot;&lt;your-name&gt;&quot;git config --global user.email &quot;&lt;your-email&gt;&quot; 其中，--global表示属性的作用范围。git config中一共有三个作用范围， --local，只对当前项目生效； --global，对当前用户的所有项目生效； --system，对所有用户的所有项目生效。 注意， 如果不指定作用范围，默认是--local； 属性覆盖优先级：--local &gt; --global &gt; --system。 查看配置 查看所有级别的属性（包括--local、--global和--system）， 1git config --list 查看指定级别的属性， 1git config --list --local 1git config --list --global 1git config --list --system 取消配置1git config --global --unset &lt;property-name&gt; 此外， --global还可以换成--local或者--system，表示撤销某个级别的属性设置； 默认是--local。 初始化项目 从零开始创建项目， 1git init &lt;project-root-directory-name&gt; 此时，名为&lt;project-root-directory-name&gt;的目录会被自动创建，并且在该目录下会自动创建.git目录用来存储元数据。 将已有项目添加 git 管理， 12cd &lt;project-root-directory&gt;git init 即，在项目根目录下执行git init。 此时，会在当前目录（即，项目根目录）下创建.git目录用来存储元数据。 文件管理文件状态在 git 管理的项目中，一个文件的某个版本（或某次修改），存在于如下几个位置， 工作目录 项目目录下，.git之外的目录即为工作目录。 之所以称之为“工作目录”，是因为用户可以在这里新建、修改、删除文件或目录，之后通过命令将变化提交给 git。 工作目录中的文件有如下状态， 1. untracked：新创建的文件会是 untracked 状态，此时，需要通过命令将新文件提交给 git 管理； 2. modified：被 git 管理的文件，在工作目录中内容被修改了，就会处于 modified 状态，此时，需要通过命令将变化更新给 git； 3. deleted：被 git 管理的文件，在工作目录中被删除了，就会处于 deleted 状态，此时，需要通过命令将删除更新给 git。 暂存区 工作目录中的文件如果有变化（新建、修改、删除），需要通过命令将这种变化更新给 git。通常，并不是修改完一个文件就立即提交到版本库；而是将修改完的文件放入暂存区，待本次所有相关的文件都修改好后一次性提交到版本库。 当文件被提交到暂存区后，git 就会为之创建一个 blob 对象存储当前版本的文件内容。 git 对象（包括 blob 对象）位于 git 元数据目录.git/objects/下。 版本库 当文件变化（新建、修改、删除）需要作为历史版本被持久化保存时，此时，变化是通过命令提交到版本库。之后，可以通过回退版本找回当前文件内容。 可以从暂存区提交到版本库（这是比较合理的方式），也可以直接从工作目录提交到版本库（新建的文件不能直接提交到版本库，需要先添加到暂存区）。 当文件被提交到版本库后，git 会为此次提交创建一个 tree 对象，该 tree 对象保存了以本次提交的视角看到的项目目录下的目录结构和文件内容。 git 对象（包括 tree 对象）位于 git 元数据目录.git/objects/下。 状态转换工作目录 –&gt; 暂存区1git add &lt;file-name&gt;... 或 1git add --all 前者是将指定文件添加到暂存区（即，交给 git 管理）；后者是将所有新文件添加到暂存区。 可以通过git status查看文件状态。 暂存区 –&gt; 版本库1git commit &lt;file-name&gt;... -m &quot;some message for describing this commit&quot; 或 1git commit -m &quot;some message for describing this commit&quot; 前者是将指定文件从暂存区提交到版本库；后者是将暂存区所有文件提交到版本库。 可以通过git log --all --graph查看所有历史提交。 此后，被提交到版本库的文件就多了一个历史版本，之后可以随时回到任意一个历史版本。 版本库 –&gt; 暂存区版本库的最新版本 –&gt; 暂存区1git reset --mixed 或 1git reset -- &lt;file-name&gt;... 前者是用版本库中的最新版本恢复暂存区中的所有文件；后者是恢复指定文件。 此时， 暂存区中的相关文件会与版本库中的最新版本保持一致； 暂存区中没被提交到版本库的修改退回到了工作目录中。 版本库的指定版本 –&gt; 暂存区1git reset --mixed &lt;commit-id&gt; 或 1git reset &lt;commit-id&gt; -- &lt;file-name&gt;... 前者是使用版本库中指定 commit（某个历史版本）恢复暂存区中所有文件；后者是恢复指定文件。 注意，恢复所有文件时，版本库中指定&lt;commit id&gt;后面的所有 commit 都会被丢弃，这会导致后面的历史版本丢失，相当于重置了最新的历史版本；而恢复部分文件时，版本库中的所有 commit 保持不变，版本库中之前的最新版本仍是现在的最新版本，从而不会导致历史版本丢失。 版本库 –&gt; both 暂存区 and 工作目录版本库的最新版本 –&gt; both 暂存区 and 工作目录1git reset --hard 用版本库中的最新版本恢复暂存区和工作目录中的所有文件。 此时， 暂存区和工作目录中的文件与版本库保持一致； 暂存区和工作目录中未被提交到版本库的修改将被丢弃。 注意，使用--hard时，只能恢复所有文件，不能只恢复指定文件。 版本库的指定版本 –&gt; both 暂存区 and 工作目录1git reset --hard &lt;commit-id&gt; 使用版本库中指定 commit（某个历史版本）恢复暂存区中的所有文件。 注意， 使用--hard时，只能恢复所有文件，不能只恢复指定文件； 使用--hard时，版本库中的最新版本会重置为指定版本，这会导致指定版本之后的所有版本都丢失。 暂存区 –&gt; 工作目录方式一，使用版本库--&gt;暂存区的命令，从而暂存区中未提交到版本库中的修改会被放回工作目录。 方式二，撤回暂存区中的修改到工作目录， 1git restore --staged &lt;file-name&gt;... 此时，会将从工作目录提交到暂存区的修改撤回到工作目录。 撤销工作目录中的修改1git restore &lt;file-name&gt;... 工作目录 –&gt; 版本库1git commit -a -m &quot;some message for describing this commit&quot; 这里的-a是指将工作目录中的修改直接提交到版本库，从而省去了添加到暂存区的步骤。 分支分支的应用场景包括但不限于如下场景， 一个分支是一个版本 例如，应用程序 v1.0 和 v2.0 都在持续更新版本，那么，v1.0 和 v2.0 可以分别作为两个分支。 一个分支是一个开发阶段 例如，对于同一个版本的应用程序，可能分为测试版和稳定版，那么， 1. 测试版和稳定版可以分别作为两个分支； 2. 测试版经过一系列迭代之后并入稳定版。 一个分支是一个特性开发 例如，应用程序在主线开发之外需要引入一个新的特性、或者修复一个紧急 bug，此时， 1. 在主线之外创建一个分支； 2. 在特性开发完成、或者 bug 修复之后，将该分支并入主线。 一个分支是一个开发模块 例如，应用程序分为前端开发和后端开发，那么， 1. 前端开发和后端开发可以分别作为两个并行推进； 2. 当前端开发和后端开发都完成后，将两个分支合并到一起。 查看分支列出所有分支名称， 1git branch 其中，*表示当前分支。 创建分支 创建新分支，但不切换到新分支， 1git branch &lt;new-branch-name&gt; &lt;commit-id&gt; 如果不指定&lt;commit-id&gt;，默认从当前分支的最新 commit 创建分支。 创建分支，并且切换到新的分支， 1git checkout -b &lt;new-branch-name&gt; &lt;commit-id&gt; 如果不指定&lt;commit-id&gt;，默认从当前分支的最新 commit 创建分支。 删除分支1git branch -d &lt;branch-name&gt; 注意， 使用-d时，要删除的分支必须已经并入了当前分支，否则删除失败； 如果确定不再需要待删除的分支、并且不想将其并入当前分支，可以使用git branch -D &lt;branch-name&gt;； 待删除的分支不能是当前分支，需要离开这个分支、然后才能删除它。 切换分支1git checkout &lt;branch-name&gt; 合并分支1git merge &lt;branch-name&gt; 将&lt;branch-name&gt;指定的分支并入到当前分支。 比较不同比较工作目录和暂存区的不同 比较所有文件 1git diff 比较指定文件 1git diff -- &lt;file-name&gt;... 比较工作目录和指定 commit 的不同 比较所有文件 1git diff &lt;commit-id&gt; 比较指定文件 1git diff &lt;commit-id&gt; -- &lt;file-name&gt;... 比较暂存区和指定 commit 的不同 比较所有文件 1git diff --cached &lt;commit-id&gt; 比较指定文件 1git diff --cached &lt;commit-id&gt; -- &lt;file-name&gt;... 比较两个 commit 的不同 比较所有文件 1git diff &lt;commit-id&gt; &lt;commit-id&gt; 比较指定文件 1git diff &lt;commit-id&gt; &lt;commit-id&gt; -- &lt;file-name&gt;... –end–","categories":[{"name":"基础工具","slug":"基础工具","permalink":"https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"基础工具/git","permalink":"https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/git/"}],"tags":[{"name":"L1","slug":"L1","permalink":"https://zhisefu.com/tags/L1/"},{"name":"教程","slug":"教程","permalink":"https://zhisefu.com/tags/%E6%95%99%E7%A8%8B/"},{"name":"git","slug":"git","permalink":"https://zhisefu.com/tags/git/"}]},{"title":"yum常用命令","slug":"yum常用命令","date":"2023-01-27T13:57:46.000Z","updated":"2023-02-20T10:48:28.822Z","comments":true,"path":"wiki/36377/","link":"","permalink":"https://zhisefu.com/wiki/36377/","excerpt":"","text":"查看列出所有已安装的软件包1yum list installed 其中，installed表示仅列出已安装的软件包。 列出某个已经安装的软件包以 git 为例， 1yum list installed git* 其中， installed限定范围为已安装的软件包； *是通配符，git*限定范围为所有名称以 git 为前缀的软件包。 列出某个已经安装和可以安装的软件包以 git 为例， 1yum list git* 其中， 这里没有installed做限定，因此，会列出所有已安装和可安装的软件包； 如上所述，*是通配符，git*限定范围为所有名称以 git 为前缀的软件包。 列出所有可更新的软件包1yum list updates 其中，updates限定了已安装且有更新的软件包。 列出可安装的软件包以 git 为例， 1yum search git 其中，search表示在 yum 源中查找名称或描述中包含git这个字符串的软件包。 安装安装某个软件包和相关依赖包以 git 为例， 1yum install -y git 如果不加-y，会有提示，需要交互式确认， 其中，y 表示 yes，d 表示 download only，N 表示 No。 命令中-y的作用就是取消交互式提示、都按输入 y 处理。 删除删除某个已经安装的软件包以 git 为例， 1yum remove -y git* 如果不加-y，会有提示，需要交互式确认， 其中，y 表示 yes，N 表示 No。 命令中-y的作用就是取消交互式提示、都按输入 y 处理。 删除软件包时，会自动将相关依赖的软件包一并删除。 命令中git*表示删除所有名称以 git 为前缀的软件包。 注意，使用通配符 * 删除前，最好先通过yum list installed git*查看一下已经安装的以git为前缀的软件包、确认是不是都是待删除的，避免误删。 — end —","categories":[{"name":"基础工具","slug":"基础工具","permalink":"https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/"},{"name":"yum","slug":"基础工具/yum","permalink":"https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/yum/"}],"tags":[{"name":"L1","slug":"L1","permalink":"https://zhisefu.com/tags/L1/"},{"name":"总结","slug":"总结","permalink":"https://zhisefu.com/tags/%E6%80%BB%E7%BB%93/"},{"name":"yum","slug":"yum","permalink":"https://zhisefu.com/tags/yum/"}]},{"title":"通过yum安装高版本git","slug":"通过yum安装高版本git","date":"2023-01-27T13:50:49.000Z","updated":"2023-02-20T10:48:35.644Z","comments":true,"path":"wiki/927/","link":"","permalink":"https://zhisefu.com/wiki/927/","excerpt":"","text":"问题描述直接使用yum install -y git，安装的 git 版本会比较老。 对此，官方文档说明如下， Red Hat Enterprise Linux, Oracle Linux, CentOS, Scientific Linux, et al.RHEL and derivatives typically ship older versions of git. You can download a tarball and build from source, or use a 3rd-party repository such as the IUS Community Project to obtain a more recent version of git. 参考，https://git-scm.com/download/linux 解决方案根据上述官方文档的描述，解决办法有如下两种， 通过源码构建； 使用第三方安装源。 这里以使用第三方源 IUS Community Project 为例，安装高版本 git 步骤如下， 检查 git 是否已经安装 1sudo yum list installed git* 如果 git 已经安装，先删除， 1sudo yum remove -y git* 更新 yum 源 123sudo yum install -y \\ https://repo.ius.io/ius-release-el7.rpm \\ https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm 参考，https://ius.io/setup 安装 git 1sudo yum install -y git236 其中，git236是 IUS Community Project 中的项目；更多 IUS 项目可以在 https://github.com/search?q=org%3Aiusrepo+topic%3Arpm&amp;type=repositories 中查找。 —end—","categories":[{"name":"基础工具","slug":"基础工具","permalink":"https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"基础工具/git","permalink":"https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/git/"}],"tags":[{"name":"L1","slug":"L1","permalink":"https://zhisefu.com/tags/L1/"},{"name":"git","slug":"git","permalink":"https://zhisefu.com/tags/git/"},{"name":"yum","slug":"yum","permalink":"https://zhisefu.com/tags/yum/"},{"name":"问题","slug":"问题","permalink":"https://zhisefu.com/tags/%E9%97%AE%E9%A2%98/"}]}],"categories":[{"name":"考古","slug":"考古","permalink":"https://zhisefu.com/categories/%E8%80%83%E5%8F%A4/"},{"name":"《考古学初级》笔记","slug":"考古/《考古学初级》笔记","permalink":"https://zhisefu.com/categories/%E8%80%83%E5%8F%A4/%E3%80%8A%E8%80%83%E5%8F%A4%E5%AD%A6%E5%88%9D%E7%BA%A7%E3%80%8B%E7%AC%94%E8%AE%B0/"},{"name":"基础工具","slug":"基础工具","permalink":"https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"基础工具/git","permalink":"https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/git/"},{"name":"yum","slug":"基础工具/yum","permalink":"https://zhisefu.com/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/yum/"}],"tags":[{"name":"L1","slug":"L1","permalink":"https://zhisefu.com/tags/L1/"},{"name":"笔记","slug":"笔记","permalink":"https://zhisefu.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"考古","slug":"考古","permalink":"https://zhisefu.com/tags/%E8%80%83%E5%8F%A4/"},{"name":"教程","slug":"教程","permalink":"https://zhisefu.com/tags/%E6%95%99%E7%A8%8B/"},{"name":"git","slug":"git","permalink":"https://zhisefu.com/tags/git/"},{"name":"总结","slug":"总结","permalink":"https://zhisefu.com/tags/%E6%80%BB%E7%BB%93/"},{"name":"yum","slug":"yum","permalink":"https://zhisefu.com/tags/yum/"},{"name":"问题","slug":"问题","permalink":"https://zhisefu.com/tags/%E9%97%AE%E9%A2%98/"}]}